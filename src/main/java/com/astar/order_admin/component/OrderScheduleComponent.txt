package com.astar.order_admin.component;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
public class OrderScheduleComponent {
    @Autowired DataGeneratorMapper generate_mapper;
    @Autowired HistoryMapper history_mapper;
    @Value("${history.dir.path}") String path;
    @Value("${history.file.encoding}") String encoding;
    @Value("${history.spool.path}") String spoolDir;


    // @Scheduled(cron="* * * * * *")
    public void makeLookupHistorySchedule(){
        List<Integer> accountList = generate_mapper.selectAccountSeqList();
        List<Integer> movieList = generate_mapper.selectMovieSeqList();
        List<MovieLookupHistoryVO> historyList = new ArrayList<MovieLookupHistoryVO>();
        // 1분에 최대30 난수
        Integer cnt = (int)(Math.random()*30+1);
        for(int i=0; i<cnt; i++){
            MovieLookupHistoryVO data = new MovieLookupHistoryVO();
            Integer r = (int)(Math.random()*accountList.size());
            data.setMlh_ai_seq(accountList.get(r));
            r = (int)(Math.random()*movieList.size());
            data.setMlh_mi_seq(movieList.get(r));
            data.setMlh_lookup_time(new Date());
            
            historyList.add(data);
        }
        generate_mapper.insertLookupHistoryDatas(historyList);
        System.out.println("generate "+cnt+" datas -"+LocalDateTime.now().toString());
    }

    // @Scheduled(cron="0 0 4 * * *")
    public void exportLookupHistorySchedule() throws Exception {
        List<MovieAgeCntVO> list = history_mapper.selectMovieAgeCntInfo(null, null);
        String filePath = path+"/agecnt_";
        Calendar c = Calendar.getInstance();
        Long timestamp = c.getTimeInMillis();
        
        // filePath += "lookup_history_"+LocalDate.now().toString()+"_"+timestamp+".csv";
        String fileName = LocalDate.now().toString()+"_"+timestamp+".csv";
        filePath += fileName;

        File file = new File(filePath);
        file.createNewFile();
        //시스템에서 설정한 인코딩을 따르는 방식
        // BufferedWriter bw = new BufferedWriter(new FileWriter(file));
        //인코딩 방식을 직접 설정해서 내보내는 방식
        BufferedWriter bw = new BufferedWriter(
            new OutputStreamWriter(
                new FileOutputStream(file), encoding
            )
        );
        for(MovieAgeCntVO data : list) {
            bw.write(data.toString());
            bw.newLine();
        }
        bw.close();
        
        File from = new File(filePath);
        File target = new File(spoolDir+"/"+fileName);
        try{
            Files.move(from.toPath(),target.toPath(),StandardCopyOption.REPLACE_EXISTING);
        }catch (IOException ioe){
            System.out.println("파일 이동에 실패했습니다. (sourceFIle : "+filePath+")");
        }
        
    }

}
